shiny::runApp()
?bulmaSelectInput
select <- 1:100
?e_graph
?e_focus_adjacency
runApp()
runApp()
runApp()
runApp()
runApp()
?e_graph
nodes <- data.frame(
name = paste0(LETTERS, 1:1000),
value = rnorm(1000, 10, 2),
size = rnorm(1000, 10, 2),
grp = rep(c("grp1", "grp2"), 500),
stringsAsFactors = FALSE
)
edges <- data.frame(
source = sample(nodes$name, 2000, replace = TRUE),
target = sample(nodes$name, 2000, replace = TRUE),
stringsAsFactors = FALSE
)
e_charts() %>%
e_graph_gl() %>%
e_graph_nodes(nodes, name, value, size, grp) %>%
e_graph_edges(edges, source, target)
nodes <- data.frame(
name = paste0(LETTERS, 1:100),
value = rnorm(100, 10, 2),
size = rnorm(100, 10, 2),
grp = rep(c("grp1", "grp2"), 500),
stringsAsFactors = FALSE
)
edges <- data.frame(
source = sample(nodes$name, 150, replace = TRUE),
target = sample(nodes$name, 150, replace = TRUE),
stringsAsFactors = FALSE
)
e_charts() %>%
e_graph_gl() %>%
e_graph_nodes(nodes, name, value, size, grp) %>%
e_graph_edges(edges, source, target)
e_charts() %>%
e_graph() %>%
e_graph_nodes(nodes, name, value, size, grp) %>%
e_graph_edges(edges, source, target)
e_charts() %>%
e_graph() %>%
e_graph_nodes(nodes, name, value, size) %>%
e_graph_edges(edges, source, target)
?e_graph
value <- rnorm(10, 10, 2)
nodes <- data.frame(
name = paste0(LETTERS, 1:100),
value = value,
size = value,
grp = rep(c("grp1", "grp2"), 5),
stringsAsFactors = FALSE
)
edges <- data.frame(
source = sample(nodes$name, 150, replace = TRUE),
target = sample(nodes$name, 150, replace = TRUE),
stringsAsFactors = FALSE
)
e_charts() %>%
e_graph() %>%
e_graph_nodes(nodes, name, value, size, grp) %>%
e_graph_edges(edges, source, target)
runApp()
runApp()
?e_highlight_p
ui <- fluidPage(
fluidRow(
column(
3,
actionButton("highlightmpg", "Highlight MPG")
),
column(
3,
actionButton("highlighthp", "Highlight HP")
),
column(
3,
actionButton("downplaympg", "Downplay MPG")
),
column(
3,
actionButton("downplayhp", "Downplay HP")
)
),
echarts4rOutput("plot")
)
server <- function(input, output, session){
output$plot <- renderEcharts4r({
mtcars %>%
e_charts(mpg) %>%
e_line(disp) %>%
e_line(hp, name = "HP") # explicitly pass name
})
# highlight
observeEvent(input$highlightmpg, {
echarts4rProxy("plot") %>%
e_highlight_p(series.index = 0) # using index
})
observeEvent(input$highlighthp, {
echarts4rProxy("plot") %>%
e_highlight_p(series.name = "HP") # using name
})
# downplay
observeEvent(input$downplaympg, {
echarts4rProxy("plot") %>%
e_downplay_p(series.name = "disp")
})
observeEvent(input$downplayhp, {
echarts4rProxy("plot") %>%
e_downplay_p(series.index = 1)
})
}
shinyApp(ui, server)
?echarts4r::e_showtip_p
library(shiny)
ui <- fluidPage(
fluidRow(
actionButton("show", "Show tooltip"),
actionButton("hide", "Hide tooltip")
),
fluidRow(
echarts4rOutput("plot"),
h3("clicked Data"),
verbatimTextOutput("clickedData"),
h3("clicked Serie"),
verbatimTextOutput("clickedSerie"),
h3("clicked Row"),
verbatimTextOutput("clickedRow")
)
)
server <- function(input, output, session){
output$plot <- renderEcharts4r({
mtcars %>%
e_charts(mpg) %>%
e_line(disp, bind = carb, name = "displacement") %>%
e_line(hp) %>%
e_x_axis(min = 10) %>%
e_tooltip(show = FALSE) %>%
e_theme("westeros")
})
observeEvent(input$show, {
echarts4rProxy("plot") %>%
e_showtip_p(
name = "displacement",
position = list(5, 5)
)
})
observeEvent(input$hide, {
echarts4rProxy("plot") %>%
e_hidetip_p()
})
output$clickedData <- renderPrint({
input$plot_clicked_data
})
output$clickedSerie <- renderPrint({
input$plot_clicked_serie
})
output$clickedRow <- renderPrint({
input$plot_clicked_row
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
